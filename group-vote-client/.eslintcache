[{"/Users/petervayda/Documents/proj_galvanize/Board-Game-Night/group-vote-client/src/index.js":"1","/Users/petervayda/Documents/proj_galvanize/Board-Game-Night/group-vote-client/src/App.js":"2","/Users/petervayda/Documents/proj_galvanize/Board-Game-Night/group-vote-client/src/reportWebVitals.js":"3","/Users/petervayda/Documents/proj_galvanize/Board-Game-Night/group-vote-client/src/ListGames.jsx":"4"},{"size":478,"mtime":1608227536038,"results":"5","hashOfConfig":"6"},{"size":372,"mtime":1608146308184,"results":"7","hashOfConfig":"6"},{"size":362,"mtime":1608146308186,"results":"8","hashOfConfig":"6"},{"size":4366,"mtime":1608239929680,"results":"9","hashOfConfig":"6"},{"filePath":"10","messages":"11","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"12"},"1l1ldc4",{"filePath":"13","messages":"14","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"15","usedDeprecatedRules":"12"},{"filePath":"16","messages":"17","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"12"},{"filePath":"18","messages":"19","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"20"},"/Users/petervayda/Documents/proj_galvanize/Board-Game-Night/group-vote-client/src/index.js",[],["21","22"],"/Users/petervayda/Documents/proj_galvanize/Board-Game-Night/group-vote-client/src/App.js",["23"],"import React, { Fragment } from \"react\";\nimport ListGames from \"./ListGames\";\n\nfunction App() {\n  return (\n    <div>\n      <div class=\"container\">\n        <div class=\"jumbotron\">\n          <h1>Game Vote Client</h1>\n          <p>Vote on your favorite game to play.</p>\n        </div>\n      </div>\n      <ListGames></ListGames>\n      \n    </div>\n  );\n}\n\nexport default App;\n","/Users/petervayda/Documents/proj_galvanize/Board-Game-Night/group-vote-client/src/reportWebVitals.js",[],"/Users/petervayda/Documents/proj_galvanize/Board-Game-Night/group-vote-client/src/ListGames.jsx",["24","25","26"],"import React, { Fragment, useEffect, useState } from \"react\";\nimport axios from 'axios';\n\nconst ListGames = () => {\n    const [gameList, setGameList] = useState([]);\n    const [gameNames, setGameNames] = useState([]);\n\n\n    const getPageData = async () => {\n        getGameNames();\n        getGameList();\n    }\n    const getGameList = async () => {\n        try {\n            var id = 2;\n            const response = await fetch(`http://localhost:8080/groupvote/${id}`);\n            const jsonData = await response.json();\n      \n            setGameList(jsonData);\n          } catch (err) {\n            console.error(err.message);\n          }\n    };\n    const getGameNames = async () => {\n        try {\n            const response = await fetch(`http://localhost:8080/games`);\n            const jsonData = await response.json();\n            setGameNames(jsonData);\n        } catch (err) {\n            console.error(err.message);\n        }\n    };\n\n    useEffect(() => {\n        // const abortController\n        getPageData();\n    \n        \n    }, []);\n\n    //upvote a game function\n   const upvoteGame = async id => {\n    try {\n        let headers = new Headers();\n        //headers.append('Access-Control-Allow-Origin', 'http://localhost:8081/');\n        //headers.append('Access-Control-Allow-Credentials', 'true');\n        headers.append('Content-Type', 'application/json');\n        let body = { id\n          }\n        const requestOptions = {\n            method: 'PATCH',\n            mode: 'cors',\n            headers: headers,\n            body: JSON.stringify(body)\n        };\n        await fetch(`http://localhost:8080/groupvote/upvote`, requestOptions)\n          .then(response => response.json())\n          .then(response => {\n          if(response.status === \"failed\")\n          alert(response.message)})\n          \n          getGameList();\n    } catch (err) {\n      console.error(err.message);\n    }\n  };\n  //downvote a game function\n  const downvoteGame = async id => {\n    try {\n        let headers = new Headers();\n        //headers.append('Access-Control-Allow-Origin', 'http://localhost:8081/');\n        //headers.append('Access-Control-Allow-Credentials', 'true');\n        headers.append('Content-Type', 'application/json');\n        let body = { id\n          }\n        const requestOptions = {\n            method: 'PATCH',\n            mode: 'cors',\n            headers: headers,\n            body: JSON.stringify(body)\n        };\n        await fetch(`http://localhost:8080/groupvote/downvote`, requestOptions)\n          .then(response => response.json())\n          .then(response => {\n          if(response.status === \"failed\")\n          alert(response.message)})\n\n          getGameList();\n    } catch (err) {\n      console.error(err.message);\n    }\n  };\n\n    return (\n        <Fragment>\n            {\" \"}\n            <table className=\"table mt-5 text-center\">\n                <thead>\n                    <tr>\n                        <th>Game Name</th>\n                        <th>Vote</th>\n                        <th>Up Vote</th>\n                        <th>Down Vote</th>\n                    </tr>\n                </thead>\n                <tbody>\n                    {gameList.map(each => (\n                        <tr key = {each.id}>\n                            {/* <td>{gameNames[each.gameID - 1].gameName}</td> */}\n                            <td>{each.gameID}</td>\n                            <td>{each.gameVotes}</td>\n                            <td>\n                                <button\n                                    type=\"button\" className=\"btn btn-success\"\n                                    onClick= {() => upvoteGame(each.id)}\n                                    >\n                                    I Want to Play\n                                </button>\n                            </td>\n                            <td>\n                                <button\n                                    type=\"button\" className=\"btn btn-danger\"\n                                    onClick= {() => downvoteGame(each.id)}\n                                    >\n                                    Hell no\n                                </button>\n                            </td>\n                        </tr>\n                    ))}\n                </tbody>\n            </table>\n        </Fragment>\n    )\n\n}\nexport default ListGames;\n",{"ruleId":"27","replacedBy":"28"},{"ruleId":"29","replacedBy":"30"},{"ruleId":"31","severity":1,"message":"32","line":1,"column":17,"nodeType":"33","messageId":"34","endLine":1,"endColumn":25},{"ruleId":"31","severity":1,"message":"35","line":2,"column":8,"nodeType":"33","messageId":"34","endLine":2,"endColumn":13},{"ruleId":"31","severity":1,"message":"36","line":6,"column":12,"nodeType":"33","messageId":"34","endLine":6,"endColumn":21},{"ruleId":"37","severity":1,"message":"38","line":39,"column":8,"nodeType":"39","endLine":39,"endColumn":10,"suggestions":"40"},"no-native-reassign",["41"],"no-negated-in-lhs",["42"],"no-unused-vars","'Fragment' is defined but never used.","Identifier","unusedVar","'axios' is defined but never used.","'gameNames' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'getPageData'. Either include it or remove the dependency array.","ArrayExpression",["43"],"no-global-assign","no-unsafe-negation",{"desc":"44","fix":"45"},"Update the dependencies array to be: [getPageData]",{"range":"46","text":"47"},[1044,1046],"[getPageData]"]